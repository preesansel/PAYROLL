package com.payroll.controller;



import com.payroll.dto.EmployeeDetails;
import com.payroll.dto.PayrollDetails;
import com.payroll.model.Payroll;
import com.payroll.service.PayrollService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/payroll")

public class PayrollController {

    private PayrollService payrollService;
    
	    public PayrollController(@Autowired PayrollService payrollService) {
	        this.payrollService = payrollService;
	    }

    @GetMapping("/calculate")
    public ResponseEntity<List<Payroll>> test(){
        List<Payroll> payrolls = payrollService.calculatePayrolls();
        return ResponseEntity.ok(payrolls);
    }

    @GetMapping("/details")
    public ResponseEntity<PayrollDetails> getPayrollDetails(
            @RequestParam Long employeeId,
            @RequestParam int year,
            @RequestParam int month) {

        try {
            PayrollDetails payrollDetails = payrollService.getPayrollDetails(employeeId, year, month);
            return ResponseEntity.ok(payrollDetails);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.notFound().build();
        }
    }
    @GetMapping("/EmployeeDetails/{employeeId}")
    public ResponseEntity<EmployeeDetails> getEmployeeDetails(@PathVariable Long employeeId) {
        EmployeeDetails employeeDTO = payrollService.getEmployeeDetails(employeeId);
        if (employeeDTO != null) {
            return ResponseEntity.ok(employeeDTO);
        } else {
            return ResponseEntity.notFound().build();
        }
    }



}
