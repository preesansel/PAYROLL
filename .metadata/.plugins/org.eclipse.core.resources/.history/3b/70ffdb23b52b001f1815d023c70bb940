//package com.payroll.service;
//
//
//import com.fasterxml.jackson.core.JsonProcessingException;
//import com.fasterxml.jackson.core.type.TypeReference;
//import com.fasterxml.jackson.databind.JsonMappingException;
//import com.fasterxml.jackson.databind.ObjectMapper;
//import com.payroll.dto.EmployeeSalaryDTO;
//import com.payroll.dto.TaxDTO;
//import com.payroll.model.Payroll;
//import com.payroll.repository.EmployeeRepository;
//import com.payroll.repository.PayrollRepository;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.context.ApplicationContext;
//import org.springframework.stereotype.Service;
//import org.springframework.web.client.RestTemplate;
//
//import java.time.LocalDate;
//import java.time.YearMonth;
//import java.util.List;
//import java.util.Map;
//import java.util.Random;
//import java.util.stream.Collectors;
//
//@Service
//public class PayrollService {
//
//    @Autowired
//    private EmployeeRepository employeeRepository;
//
//    @Autowired
//    private PayrollRepository payrollRepository;
//
//    @Autowired
//    private RestTemplate restTemplate;
//
//    @Autowired
//    private ApplicationContext applicationContext;
//
//
//    public List<Payroll> calculatePayrolls() {
//       
//        List<EmployeeSalaryDTO> employeeSalaries = employeeRepository.findEmployeeSalaryDetails();
//
//        // Fetch tax details from the tax service
//        String taxServiceUrl = "http://tax-service/taxes";
//        String taxResponse = restTemplate.getForObject(taxServiceUrl, String.class);
//       
//
//        Random random = new Random();
//
//        // Calculate payroll for each employee
//        List<Payroll> payrolls = employeeSalaries.stream().map(employeeSalary -> {
//            TaxDTO taxes = taxDetails.get(employeeSalary.getEmployeeId());
//
//            if (taxes == null) {
//                return null;
//            }
//
//            // Get a new Payroll instance from the application context
//            Payroll payroll = applicationContext.getBean(Payroll.class);
//            payroll.setEmpId(employeeSalary.getEmployeeId());
//            payroll.setPayDate(LocalDate.now());
//
//            // Calculate monthly salary details
//            double basicPay = employeeSalary.getBasicPay() / 12;
//            double houseRentAllowance = employeeSalary.getHouseRentAllowance() / 12;
//            double specialAllowance = employeeSalary.getSpecialAllowance() / 12;
//            double epf = employeeSalary.getEpf() / 12;
//
//          
//         // Get the current year and month
//            YearMonth currentYearMonth = YearMonth.now();
//            int daysInMonth = currentYearMonth.lengthOfMonth();
//
//            // Calculate standard working days for the current month
//            int standardWorkingDays = daysInMonth;
//
//            // Check if the employee joined in the current month
//            LocalDate doj = employeeSalary.getDoj();
//            if (doj.getYear() == currentYearMonth.getYear() && doj.getMonth() == currentYearMonth.getMonth()) {
//                // Adjust standard working days based on the date of joining
//                int daysWorked = doj.getDayOfMonth();
//                standardWorkingDays -= daysWorked;
//            }
//
//            // Adjust standard working days based on leave without pay (LOP)
//            int lop = random.nextInt(10); // Assuming lop is generated randomly
//            int workDays = standardWorkingDays - lop;
//            
//            
//            payroll.setBasicPay(basicPay);
//            payroll.setHouseRentAllowance(houseRentAllowance);
//            payroll.setSpecialAllowance(specialAllowance);
//            payroll.setEpf(epf);
//            payroll.setIncomeTax(taxes.getIncomeTax());
//            payroll.setProfessionalTax(taxes.getProfessionalTax());
//
//            
//            payroll.setLop(lop);
//
//            return payroll;
//        }).collect(Collectors.toList());
//
//        // Filter out any null entries
//        payrolls = payrolls.stream().filter(p -> p != null).collect(Collectors.toList());
//
//        // Save all payrolls to the repository
//        payrollRepository.saveAll(payrolls);
//
//        return payrolls;
//    }
//}
